import { describe, it } from "node:test";
import { tryAsPerValidator } from "@typeberry/block";
import { BytesBlob } from "@typeberry/bytes";
import { Decoder } from "@typeberry/codec";
import { tinyChainSpec } from "@typeberry/config";
import { deepEqual } from "@typeberry/utils";
import { tryAsPerCore } from "./common.js";
import { StatisticsData } from "./statistics.js";

describe("Statistics", () => {
  it("should decode statistics data 1", () => {
    const spec = tinyChainSpec;

    const statistics = Decoder.decodeObject(StatisticsData.Codec, BytesBlob.parseBlob(STATISTICS1), spec);

    deepEqual(
      statistics,
      StatisticsData.create({
        current: tryAsPerValidator([], spec),
        previous: tryAsPerValidator([], spec),
        cores: tryAsPerCore([], spec),
        services: new Map(),
      }),
    );
  });

  it("should decode statistics data 2", () => {
    const spec = tinyChainSpec;

    const statistics = Decoder.decodeObject(StatisticsData.Codec, BytesBlob.parseBlob(STATISTICS2), spec);

    deepEqual(
      statistics,
      StatisticsData.create({
        current: tryAsPerValidator([], spec),
        previous: tryAsPerValidator([], spec),
        cores: tryAsPerCore([], spec),
        services: new Map(),
      }),
    );
  });
});

const STATISTICS1 =
  "0xc2fd3500000000000000000214000000000001c02b5a00000000000000001c51ddb1000001c1d2db0000000000000000";

const STATISTICS2 =
  "0x00000000000000000000000000000000030000000400000000000000000000000000000000000000030000000400000002000000000000000000000000000000030000000400000001000000030000000000000000000000000000000400000002000000000000000000000000000000000000000400000002000000000000000000000000000000000000000400000002000000060000000000000000000000000000000600000002000000000000000000000000000000060000000600000003000000030000000000000000000000060000000600000003000000030000000000000000000000060000000600000001000000000000000000000000000000000000000600000001000000000000000000000000000000000000000600000081240600000000000000000000000000000214000000000000000000000001a5ff00001c51ddb1000000000000000001c0e26c0000";
